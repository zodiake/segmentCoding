package com.nielsen.category

import com.nielsen.coding.codingUtil
import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.rdd.PairRDDFunctions

/**
  * @author daiyu01
  */
/*
    arg0:source data
    arg1:sales data
    arg2:segconfig
    arg3:top
 */
object CateCoFilter {
  val list = List(
    "BATHROOMT",
    "BFOOD",
    "BIS",
    "BLADE",
    "BP",
    "CERE",
    "COFF",
    "CONDOM",
    "CONF",
    "CSD",
    "DIAP",
    "DWL",
    "FACIA",
    "FACIALMASK",
    "FACIALT",
    "FB",
    "FBFT",
    "FT",
    "GUM",
    "HAIR",
    "HC",
    "HOUS",
    "IMF",
    "INSE",
    "LAUND",
    "LIQM",
    "MILK",
    "MOIS",
    "MOTOROIL",
    "ORAL_CARE_BUNDLE",
    "PESTCONTROL",
    "PETFOOD",
    "PWASH",
    "RAZOR",
    "RAZORBLADE",
    "SHAM",
    "SKIN",
    "SKIN_BUNDLE",
    "SNACK",
    "SP",
    "TONER",
    "TP",
    "VITAMINS",
    "YD",
    "BABYP/LAUND/SKIN/INSB",
    "BABYP/SKIN/PWASH/SHAM/FACIA",
    "BANDEDPACK",
    "BBCREAM/FACIA/TONER/SKIN/FACIALMASK",
    "BBCREAM/SKIN",
    "COTTONPADS/SKIN/FACIALMASK",
    "DEODORANT/FACIALMASK/SKIN",
    "EXFOLIATINGP/SKIN",
    "EXFOLIATINGP/SKIN/FACIALMASK",
    "EXFOLIATINGP/TONER/FACIALMASK/SKIN",
    "EYEMASK/SKIN",
    "FACIA/BBCREAM/SKIN/TONER",
    "FACIA/FACIALMASK/SKIN",
    "FACIA/FACIALMASK/SKIN/PTBH",
    "FACIA/FACIALMASK/SKIN/TONER",
    "FACIA/FACIALMASK/TONER/SKIN",
    "FACIA/LIPPALM/SKIN",
    "FACIA/SKIN",
    "FACIA/SKIN/ACNEP",
    "FACIA/SKIN/DEODORANT",
    "FACIA/SKIN/FACIALMASK",
    "FACIA/SKIN/LIPPALM",
    "FACIA/SKIN/TONER",
    "FACIA/SKIN/TONER/ACNEP",
    "FACIA/SKIN/TONER/BBCREAM",
    "FACIA/SKIN/TONER/FACIALMASK",
    "FACIA/TONER/FACIALMASK/SKIN",
    "FACIA/TONER/SKIN",
    "FACIA/TONER/SKIN/BBCREAM",
    "FACIA/TONER/SKIN/DEODORANT",
    "FACIA/TONER/SKIN/FACIALMASK",
    "FACIALMASK/EYEMASK/SKIN",
    "FACIALMASK/FACIA/SKIN/TONER",
    "FACIALMASK/FACIA/SKIN/TONER/BBCREAM",
    "FACIALMASK/FACIA/TONER/SKIN",
    "FACIALMASK/SKIN",
    "FACIALMASK/SKIN/FACIA",
    "FACIALMASK/SKIN/FACIA/TONER",
    "FACIALMASK/SKIN/FACIA/TONER/BBCREAM",
    "FACIALMASK/SKIN/TONER",
    "FACIALMASK/SKIN/TONER/FACIA/BBCREAM",
    "FACIALMASK/TONER/FACIA/SKIN",
    "FACIALMASK/TONER/SKIN",
    "FACIALMASK/TONER/SKIN/BBCREAM",
    "HAIRS/FACIA/SKIN",
    "LIPPALM/FACIA/SKIN",
    "LIPPALM/SKIN",
    "LIPPALM/SKIN/TP/TB",
    "PWASH/HAIR/SKIN",
    "PWASH/SHAM/EXFOLIATINGP/SKIN",
    "PWASH/SHAM/SKIN",
    "PWASH/SHAM/SKIN/BABYP",
    "PWASH/SHAM/SKIN/BABYP/BABYW",
    "PWASH/SHAM/SKIN/BATHSALT",
    "PWASH/SHAM/SKIN/FACIA",
    "PWASH/SHAM/SKIN/FACIA/TONER",
    "PWASH/SHAM/SKIN/HAIR",
    "PWASH/SHAM/SKIN/LAUND",
    "PWASH/SHAM/SKIN/TP",
    "PWASH/SHAM/SKIN/TP/TB",
    "PWASH/SKIN",
    "PWASH/SKIN/BABYP",
    "PWASH/SKIN/BABYP/BABYW",
    "PWASH/SKIN/BABYP/INSB",
    "PWASH/SKIN/BABYP/LIPPALM",
    "PWASH/SKIN/BATHSALT",
    "PWASH/SKIN/DEODORANT",
    "PWASH/SKIN/FACIA",
    "PWASH/SKIN/FACIA/FACIALMASK/EYEMASK",
    "PWASH/SKIN/FACIA/SHAVINGCF",
    "PWASH/SKIN/FACIA/TONER",
    "PWASH/SKIN/FACIALMASK",
    "PWASH/SKIN/HAIR",
    "PWASH/SKIN/INSB",
    "PWASH/SKIN/INSR/BABYP",
    "PWASH/SKIN/LIPPALM",
    "PWASH/SKIN/LIPPALM/TB/TP",
    "PWASH/SKIN/TONER",
    "PWASH/TB/SKIN",
    "PWASH/TONER/SKIN/FACIALMASK",
    "SHAM/HAIR/LAUND/DWL/SKIN/PWASH",
    "SHAM/HAIR/PWASH/SKIN",
    "SHAM/HAIR/SKIN/PWASH",
    "SHAM/HAIR/SKIN/TB/LIPPALM",
    "SHAM/PWASH/HAIR/SKIN",
    "SHAM/PWASH/SKIN/HAIR",
    "SHAM/SKIN",
    "SHAM/SKIN/BABYP",
    "SHAM/SKIN/FACIA",
    "SHAM/SKIN/FACIA/TONER",
    "SHAM/SKIN/HAIR",
    "SHAM/SKIN/TONER",
    "SHAVINGCF/SKIN",
    "SKIN/ACNEP",
    "SKIN/ACNEP/FACIALMASK",
    "SKIN/BABYP",
    "SKIN/BABYW",
    "SKIN/BBCREAM",
    "SKIN/BBCREAM/CF",
    "SKIN/BBCREAM/EYEMASK",
    "SKIN/BBCREAM/TONER",
    "SKIN/Bath",
    "SKIN/CF",
    "SKIN/COTTONPADS",
    "SKIN/DEODORANT",
    "SKIN/EXFOLIATINGP",
    "SKIN/EYEMASK",
    "SKIN/FACIA",
    "SKIN/FACIA/BBCERAM/EYEMASK",
    "SKIN/FACIA/BBCREAM",
    "SKIN/FACIA/BBCREAM/EXFOLIATINGP",
    "SKIN/FACIA/BBCREAM/TONER",
    "SKIN/FACIA/CF",
    "SKIN/FACIA/CF/BBCREAM",
    "SKIN/FACIA/Deodorant",
    "SKIN/FACIA/FACIALMASK",
    "SKIN/FACIA/FACIALMASK/BBCREAM",
    "SKIN/FACIA/FACIALMASK/CF",
    "SKIN/FACIA/FACIALMASK/EXFOLIATINGP",
    "SKIN/FACIA/LIPPALM",
    "SKIN/FACIA/SKIN",
    "SKIN/FACIA/TONER",
    "SKIN/FACIA/TONER/BBCREAM",
    "SKIN/FACIA/TONER/CF",
    "SKIN/FACIA/TONER/CF/EYEMASK",
    "SKIN/FACIA/TONER/EYEMASK",
    "SKIN/FACIA/TONER/FACIALMASK",
    "SKIN/FACIA/TONER/FACIALMASK/BBCREAM",
    "SKIN/FACIA/TONER/FACIALMASK/CF/ACNEP",
    "SKIN/FACIA/TONER/FACIALMASK/EXFOLIATINGP",
    "SKIN/FACIA/TONER/FACIALMASK/LIPPALM",
    "SKIN/FACIA/TONER/LIPPALM",
    "SKIN/FACIA/TONER/PHS",
    "SKIN/FACIALMASK",
    "SKIN/FACIALMASK/BBCREAM",
    "SKIN/FACIALMASK/CF/ACNEP",
    "SKIN/FACIALMASK/CF/BBCREAM",
    "SKIN/FACIALMASK/COTTONPADS",
    "SKIN/FACIALMASK/LIPPALM",
    "SKIN/FACIALMASK/PHS",
    "SKIN/HAIR",
    "SKIN/HAIRS/HAIR",
    "SKIN/INSB",
    "SKIN/INSB/INSR",
    "SKIN/INSR",
    "SKIN/LAUND",
    "SKIN/LIPPALM",
    "SKIN/LIPPALM/FACIA",
    "SKIN/PWASH",
    "SKIN/SHAM",
    "SKIN/SHAM/EXFOLIATINGP",
    "SKIN/TB/LIPPALM",
    "SKIN/TONER",
    "SKIN/TONER/BBCREAM",
    "SKIN/TONER/BBCREAM/EXFOLIATINGP",
    "SKIN/TONER/BBCREAM/FACIA",
    "SKIN/TONER/CF",
    "SKIN/TONER/EYEMASK",
    "SKIN/TONER/FACIA",
    "SKIN/TONER/FACIA/BBCREAM",
    "SKIN/TONER/FACIA/CF",
    "SKIN/TONER/FACIALMASK",
    "SKIN/TONER/FACIALMASK/BBCREAM",
    "SKIN/TONER/FACIALMASK/CF",
    "SKIN/TONER/SKIN/LIPPALM",
    "SKIN/TP",
    "SKIN/TP/TB",
    "Salt",
    "TONER/FACIA/SKIN",
    "TONER/FACIA/SKIN/TONER/FACIALMASK",
    "TONER/SKIN",
    "TONER/SKIN/BBCREAM",
    "TONER/SKIN/EXFOLIATINGP",
    "TONER/SKIN/FACIA",
    "TONER/SKIN/FACIALMASK",
    "HAIR/PWASH/SHAM",
    "HAIR/SHAM",
    "PWASH/HAIR",
    "PWASH/HAIR/SHAM",
    "PWASH/SHAM",
    "PWASH/SHAM/BABYP",
    "PWASH/SHAM/BABYP/INSB",
    "PWASH/SHAM/Deodorant",
    "PWASH/SHAM/HAIR",
    "PWASH/SHAM/HAIR/LAUND",
    "PWASH/SHAM/HAIRS",
    "PWASH/SHAM/HAIRS/HAIR",
    "PWASH/SHAM/INSB",
    "PWASH/SHAM/INSB/INSR",
    "PWASH/SHAM/LAUND",
    "PWASH/SHAM/TB/HAIR",
    "PWASH/SHAM/TP",
    "PWASH/SHAM/TP/HAIR",
    "PWASH/SHAM/TP/TB",
    "PWASH/SHAM/TP/TB/HAIR",
    "SHAM/HAIR",
    "SHAM/HAIR/BATHSALT",
    "SHAM/HAIR/BODYTLPW",
    "SHAM/HAIR/FACIALT",
    "SHAM/HAIR/HC",
    "SHAM/HAIR/LAUND",
    "SHAM/HAIR/PWASH",
    "SHAM/HAIR/PWASH/TP/TB",
    "SHAM/HAIR/TP",
    "SHAM/HAIRS/HAIR",
    "SHAM/PWASH",
    "SHAM/PWASH/BIS",
    "SHAM/PWASH/HAIR",
    "SHAM/PWASH/HAIR/TP/TB",
    "SHAM/PWASH/TP/TB/LAUND",
    "SHAM/TP/HAIR",
    "PWASH/TP/TB",
    "TB/MOUTHWASH",
    "TB/PWASH/TP",
    "TP/MOUTHWASH",
    "TP/MOUTHWASH/DF",
    "TP/MOUTHWASH/TB",
    "TP/TB",
    "TP/TB",
    "TP/TB/DF",
    "TP/TB/LAUND",
    "TP/TB/LIPPALM",
    "TP/TB/MOUTHWASH"
  ).map(_.toLowerCase)

  def main(args: Array[String]): Unit = {
    val conf = new SparkConf()
    conf.setAppName("CateCoFilter")
    val sc = new SparkContext(conf)
    val num = args(3).toInt
    val cateCoLstTmp = sc.textFile(args(2)).map { x => x.split(",")(1) }.distinct().collect().toList
    val cateCoLst = "NC" :: cateCoLstTmp
    val jd: Array[String] => Boolean = i => i(1).substring(8, 13) == "20125" || i(1).substring(8, 13) == "20127"
    val other: Array[String] => Boolean = i => i(1).substring(8, 13) != "10010"
    val filtered = if (args(4) == "JDFULL") jd else other
    val cateCodingText = sc.textFile(args(0)).map(_.split(",")).cache()
    val bigAmount=cateCodingText.filter(i => list.indexOf(i(0)) > 0 && i(6).toDouble > 5000)
    val categoryCodedFile = cateCodingText.filter(x => cateCoLst.contains(x(0)))
      .filter(filtered).map { cate => (cate(1), (cate(0), cate(2), cate(4))) }
    val salesText = sc.textFile(args(1)).map(_.split(",")).map { x => (x(0), x(1)) }
    val cateCoPairRdd = new PairRDDFunctions(categoryCodedFile)
    val combine = cateCoPairRdd.leftOuterJoin(salesText).filter(!_._2._2.isEmpty).map { x =>
      var cateCode = x._2._1._1
      var itemid = x._1
      var brandType = x._2._1._2
      var desc = x._2._1._3
      var salesValue = x._2._2.get.toDouble
      var t = "T100"
      val store = itemid.substring(8, 13)
      val period = itemid.substring(0, 8)
      (cateCode, (salesValue, (cateCode, itemid, brandType, desc, t, store, period)))
    }
    val combinePairRdd = new PairRDDFunctions(combine).groupByKey().map { x => (x._1, x._2.toList.sortBy(_._1).takeRight(num)) }.map(_._2).reduce(_ ::: _)
      .map(x => x._2._1 + "," + x._2._5 + "," + x._2._6 + "," + x._2._7 + "," + x._2._2 + "," + x._2._3 + "," + x._2._4 + "," + x._1)
    val codingUtil = new codingUtil
    codingUtil.deleteExistPath(args(0).concat("_FILTER_").concat(num.toString()))
    val rdd = sc.parallelize(combinePairRdd)
    rdd.saveAsTextFile(args(0).concat("_FILTER_").concat(num.toString()))
    codingUtil.deleteExistPath(args(0).concat("_HUGE_").concat(num.toString()))
    bigAmount.saveAsTextFile(args(0).concat("_HUGE_").concat(num.toString()))
  }
}